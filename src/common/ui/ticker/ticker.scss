/**
 * @file tick-animate.scss
 * @author deo
 *
 * 勾选变打勾动画效果
 */

// 2种状态的转换时间
$c2s-dur: .6s;
// 4个边的动画步长
$ticked-step-dur: 0.28s;
// 动画
$cubic: cubic-bezier(0.42, 0, 0.58, 1.0);

/**
 * 阴影动画效果
 */
@keyframes shadow {
    from {
        opacity: 1; 
        transform: scale(1);
    }
    to {
        opacity: 0; 
        transform: scale(3);
    }
}
/**
 * 圆形变为方形
 */
@keyframes to-square {
    from {
        border-radius: 100%;
    }
    to {
        border-radius: 0;
    }
}
/**
 * 圆形变为方形
 */
@keyframes to-circle {
    from {
        border-radius: 0;
    }
    to {
        border-radius: 100%;
    }
}

/**
 * 求平方根
 *
 */
@function sqrt($r) {
    $x0: 1;
    $x1: $x0;

    @for $i from 1 through 10 {
        $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
        $x0: $x1;
    }

    @return $x1;
}

/**
 * 获取等腰直角三角形斜边长度
 *
 * @param {$hypo} 直角边长度
 */
@function getOpposite ($hypo) {
    @return sqrt($hypo * $hypo * 2);
}



    /**
     * 获取箭头变方形的动画配置
     *
     * @param {$delay} 等待时间
     */
    @function getUnTickStep ($delay: 0) {
        @return transform $ticked-step-dur ease-out $ticked-step-dur * $delay;
    }


    /**
     * 获取方形变箭头的四条边线移动动画配置
     *
     * @param {$delay} 等待时间
     */
    @function getTickedStep ($delay: 0) {
        @return transform $ticked-step-dur $cubic $c2s-dur + $ticked-step-dur * $delay;
    }

/**
 * Combooooooooooooooooooooooooo
 * 如果你想调整动画速度，自己玩哈
 *
 * @param {$tick-size} 外容器尺寸
 * @param {$ticked-inset} 打勾图形尺寸
 * @param {$ticked-line} 打勾图形线的尺寸
 * @param {$untick-color} 未勾选的边框颜色
 * @param {$ticked-linecolor} 勾线颜色
 * @param {$ticked-bgcolor} 勾选状态背景色
 * @param {$ticked-shadow-bgcolor} 点击态背景效果色
 *
 */
@mixin tickedCombo (
    $tick-size: 20px,
    $ticked-inset: 12px,
    $ticked-line: 2px,
    $untick-color: #AAAFB2,
    $ticked-linecolor: #fff,
    $ticked-bgcolor: #4BB1FA,
    $tick-shadow-bgcolor: #666
) {

    $white: #fff;
    
    // 设置基础属性
    position: relative;
    width: $tick-size;
    height: $tick-size;
    
    /* 旋转背后的圆巴巴 */
    &:before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        width: $tick-size - 2;
        height: $tick-size - 2;
        border-radius: 100%;
        border: 1px solid $white;
    }
    
    /* Shadow 效果 */
    &:after {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        width: $tick-size;
        height: $tick-size;
        background: $tick-shadow-bgcolor;
        border-radius: 100%;
        opacity: 0;
    }
    
    /* 未勾选 状态 */
    &.untick {
        border-radius: 100%;

        &:before {
            background: $white;
            border-color: $untick-color;
        }

        .tick-inner {
            border-radius: 100%;

            span {
                border-radius: 100%;
            }
        }
    }

    // 直角等腰三角形对角边长
    $short-percent: .5;
    // 获取斜边长
    $opposite: getOpposite(12);
    $fix-x-center: $ticked-inset * .5 - ($tick-size - $opposite) * .45 * $short-percent;
    $fix-y-center: $ticked-inset * .5 - ($tick-size - $opposite) * .62;
    
    /* 勾选状态 */
    &.ticked {

        .tick-inner {
            opacity: 1;
            transform: rotate(180deg - 45deg);
            // 手动修正到中心
            transform-origin: $fix-x-center $fix-y-center;
        }
        
        // 短边 勾
        .tick-right {
            transform: translate3d(0, $ticked-inset * -1 * $short-percent, 0px);
        }

        .tick-bottom {
            transform: translate3d($ticked-inset * -1, 0, 0px);
        }

        .tick-left {
            transform: translate3d(0, $ticked-inset * -1, 0px);
        }
    
        // 背景块
        &:before {
            background: $ticked-bgcolor;
            border-color: $ticked-bgcolor;
        }
    }
    
    // 把打勾图形放在外层容器的中心位置
    $tick-margin: ($tick-size - $ticked-inset) * .5;
    // 内部的4个边线区块修正图形尺寸 (减去边线)
    $ticked-fix-size: $ticked-inset - $ticked-line;
    // border
    $ticked-border: $ticked-line solid $ticked-linecolor;

    .tick-inner {
        position: absolute;
        width: $ticked-inset;
        height: $ticked-inset;
        overflow: hidden;
        opacity: 0;
        left: $tick-margin;
        top: $tick-margin;
        
        /**
         * 四条线的基本配置
         */
        span {
            position: absolute;
            
            &.tick-top {
                left: 0;
                top: 0;
                width: $ticked-inset;
                height: $ticked-fix-size;
                border-top: $ticked-border;
            }
            
            &.tick-right {
                right: 0;
                top: 0;
                width: $ticked-fix-size;
                height: $ticked-inset;
                border-right: $ticked-border;
            }
            
            &.tick-bottom {
                left: 0;
                bottom: 0;
                width: $ticked-inset;
                height: $ticked-fix-size;
                border-bottom: $ticked-border;
            }
            
            &.tick-left {
                left: 0;
                top: 0;
                width: $ticked-fix-size;
                height: $ticked-inset;
                border-left: $ticked-border;
            }
        }
    }

    /**
     * [START circle to square] {change to ticked} 圆形变方形
     */
    
    /* 首先从圆形变成方形 */
    &.tick-circle-to-square {
        
        animation: to-square $c2s-dur $cubic;
        animation-fill-mode: forwards;

        span {
            animation: to-square $c2s-dur $cubic;
            animation-fill-mode: forwards;
        }
        
        // 点击态动画
        &:after {
            animation: shadow $c2s-dur $cubic;
            animation-fill-mode: forwards;
        }
    }

    /**
     * 方形变成打勾
     * 该动画起始位置从 step 1 开始
     * step1: 画出打勾的最小直线
     * step2: 隐藏方形底部边框
     * step3: 隐藏方形左侧边框
     * 
     * $tick-dur * num: delay 执行的时间
     */
    &.tick-ticked-animate {
        @extend .ticked;

        .tick-inner {
            transition: transform $ticked-step-dur * 2 $cubic $c2s-dur;
        }
        
        // 短边 勾
        .tick-right {
            transition: getTickedStep();
        }

        .tick-bottom {
            transition: getTickedStep();
        }

        .tick-left {
            transition: getTickedStep(1);
        }
    }


    /**
     * [START square to circle] {change to untick}
     */

    &.tick-untick-animate {

        .tick-inner {
            border-radius: 0;
            opacity: 1;
            transform: rotate(0deg);
            transition: transform $ticked-step-dur * 3 $cubic;
            // 手动修正到中心
            transform-origin: $ticked-inset * .5 $ticked-inset * .5;

            span {
                border-radius: 0;
            }
        }
        
        // 短边 勾
        .tick-right {
            transform: translate3d(0, 0, 0);
            transition: getUnTickStep();
        }

        .tick-left {
            transform: translate3d(0, 0, 0);
            transition: getUnTickStep();
        }

        .tick-bottom {
            transform: translate3d(0, 0, 0);
            transition: getUnTickStep(1);
        }

        // 控制一下背景色块
        &.untick {

            // 修改 背景框的颜色
            @keyframes to-circle-default {
                from {
                    border-color: $white;
                    background: $ticked-bgcolor;
                }
                to {
                    border-color: $untick-color;
                    background: $white;
                }
            }

            // 背景块
            &:before {
                animation: to-circle-default $c2s-dur + $ticked-step-dur $cubic;
                animation-fill-mode: forwards;
            }
        }
    }
    
    /* 首先从圆形变成方形 */
    &.tick-square-to-circle {
        
        animation: to-circle $c2s-dur $cubic $ticked-step-dur;
        animation-fill-mode: forwards;

        span {
            animation: to-circle $c2s-dur $cubic $ticked-step-dur;
            animation-fill-mode: forwards;
        }
    }
}

      
.tick {
    @include tickedCombo();
}
